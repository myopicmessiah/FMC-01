print(paste("While the total number of rows with negative values is ZERO, the number of rows with values greater than 1 are:", nrow(grt_vals)))
View(fit_vals)
# (e)
#
fit_vals <- fit_vals %>% mutate(tilde_val = if_else(mod_iag$fitted.values>=0.5, 1, 0))
View(fit_vals)
print(paste("Number of Elibible Families = ", sum(fit_vals$tilde_val)))
# (b)
# Linear Probability Model, eligibility -> f(income, age, gender)
# model with income, age, and gender
mod_iag <- lm(e401k~inc+age+male+incsq+agesq, data = k401)
fit_vals <- as.data.frame(mod_iag$fitted.values)
summary(fit_vals)
grt_vals <- fit_vals %>% filter(mod_iag$fitted.values>1)
print(paste("While the total number of rows with negative values is ZERO, the number of rows with values greater than 1 are:", nrow(grt_vals)))
# (e)
#
fit_vals <- fit_vals %>% mutate(tilde_val = if_else(mod_iag$fitted.values>=0.5, 1, 0))
print(paste("Number of Elibible Families = ", sum(fit_vals$tilde_val)))
# (C)
# RESULT:
print("Dependence of eligibility on income, age and gender: ")
View(k401)
# (vi)
k401 <- k401 %>% mutate(pred_val = fit_vals$tilde_val)
View(k401)
View(grt_vals)
true_pos <- k401 %>% filter(e401k>0)
View(true_pos)
num_pred_pos <- sum(true_pos$pred_val)
print(paste("Of the Total ", length(true_pos)))
print(paste("Of the Total ", nrow(true_pos)))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are: ", num_pred_pos))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos, which is (num_pred_pos*100/nrow(true_pos))))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos, "which is", (num_pred_pos*100/nrow(true_pos)), "%."))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=6), "%."))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=4), "%."))
true_neg <- k401 %>% filter(e4)
true_neg <- k401 %>% filter(e401k==0)
View(true_neg)
num_pred_pos <- sum(true_neg$pred_val)
neg_pred_pos <- sum(true_neg$pred_val)
# (vi)
k401 <- k401 %>% mutate(pred_val = fit_vals$tilde_val)
true_pos <- k401 %>% filter(e401k>0)
num_pred_pos <- sum(true_pos$pred_val)
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible are:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=4), "%."))
true_neg <- k401 %>% filter(e401k==0)
neg_pred_pos <- sum(true_neg$pred_val)
print(paste("Of the Total", nrow(true_neg), "Ineligible Families, the number of families predicted to be ineleligible is:", corr_pred, "which is", signif(corr_pred*100/nrow(true_neg), digits=4), "%."))
corr_pred <- nrow(true_neg)-neg_pred_pos
print(paste("Of the Total", nrow(true_neg), "Ineligible Families, the number of families predicted to be ineleligible is:", corr_pred, "which is", signif(corr_pred*100/nrow(true_neg), digits=4), "%."))
k401 <- k401 %>% mutate(pred_crct = if_else(k401$e401k==k401$pred_val, 1, 0))
num_pred_correctly <- sum(k401$pred_crct)
print(paste("Of the Total", nrow(k401)))
num_pred_correctly <- sum(k401$pred_crct)
print(paste("Of the Total", nrow(k401), "families, the eligibility of ", num_pred_correctly, "families was predicted correctly, which is,", signif(num_pred_correctly*100/nrow(k401), digits=4), "%."))
# print(paste("Overall Correct "))
```
print(paste("Of the Total", nrow(k401), "families, the eligibility of ", num_pred_correctly, "families was predicted correctly, which is,", signif(num_pred_correctly*100/nrow(k401), digits=4), "%."))
k401 <- k401 %>% mutate(pred_crct = if_else(k401$e401k==k401$pred_val, 1, 0))
num_pred_correctly <- sum(k401$pred_crct)
print(paste("Of the Total", nrow(k401), "families, the eligibility of ", num_pred_correctly, "families was predicted correctly, which is,", signif(num_pred_correctly*100/nrow(k401), digits=4), "%."))
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible is:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=4), "%."))
print(paste("Of the Total", nrow(true_neg), "Ineligible Families, the number of families predicted to be ineleligible is:", corr_pred, "which is", signif(corr_pred*100/nrow(true_neg), digits=4), "%."))
#(Viii)
mod_iag_pi <- lm(e401k~inc+age+male+incsq+agesq+pira, data = k401)
summary(mod_iag_pi)
#(ix)
# average, standard deviation, minimum, and maximum values of nettfa in the sample
summary(k401$nettfa)
print(paste("Average: ", mean(k401$nettfa), "Standard Deviation: ", sd(k401$nettfa), "Minimum Value: ", min(k401$nettfa), "Maximum Value: ", max(k401$nettfa), "."))
tavg <- format(round(mean(k401$nettfa, 2), nsmall=2))
tavg <- format(round(mean(k401$nettfa, 2)))
tavg <- format(mean(k401$nettfa, 2), digits=2)
tavg
tavg <- format(mean(k401$nettfa), digits=2)
tavg
tavg <- format(mean(k401$nettfa), digits=4)
tavg
tsd
tsd <- format(sd(k401$nettfa), digits=4)
tsd
tmin <- format(min(k401$nettfa), digits=5))
tmin <- format(min(k401$nettfa), digits=5)
tmin <- format(min(k401$nettfa), digits=6)
tmin <- format(min(k401$nettfa), digits=5)
tmax <- format(max(k401$nettfa), digits=7)
tmax <- format(max(k401$nettfa), digits=6)
tmax <- format(max(k401$nettfa), digits=7)
print(paste("Average: ", tavg, "Standard Deviation: ", tsd, "Minimum Value: ", tmin, "Maximum Value: ", tmax, "."))
print(paste("Average: ", tavg, "; Standard Deviation: ", tsd, "; Minimum Value: ", tmin, "; Maximum Value: ", tmax, "."))
print(paste("Average:", tavg, "; Standard Deviation:", tsd, "; Minimum Value:", tmin, "; Maximum Value:", tmax, "."))
library(readxl)
library(dplyr)
k401 <- read_excel("C:/Users/sharm/OneDrive/Documents/Rstudio/Econometrics-I/401ksubs.xls")
# View(k401)
k401 <- as.data.frame(k401)
# (i)
# Counting the Total Number of Eligible families and calculating
# summary(k401)
nEligible <- sum(k401$e401k)
nTotal <- length(k401$e401k)
print(paste("Number of Eligible Families = ", nEligible))
print(paste("Which is ", (nEligible*100/nTotal), "% of the total of ", nTotal, "families."))
# (ii)
# Linear Probability Model, eligibility -> f(income, age, gender)
# model with income, age, and gender
mod_iag <- lm(e401k~male+incsq+agesq, data = k401)
# mod_iag <- lm(e401k~inc+age+male+incsq+agesq, data = k401)
summary(mod_iag)
#
# # model with income^2, age^2, gender
# mod_iag_sq <- lm(e401k~incsq+agesq+male, data=k401)
# summary(mod_iag_sq)
# (iii)
# RESULT:
print("Dependence of eligibility on income, age and gender: ")
# (iv)
# fitted values
fit_vals <- as.data.frame(mod_iag$fitted.values)
summary(fit_vals)
grt_vals <- fit_vals %>% filter(mod_iag$fitted.values>1)
print(paste("While the total number of rows with negative values is ZERO, the number of rows with values greater than 1 are:", nrow(grt_vals)))
# (v)
# Making anyone with a probability greater than or equal to 0.5 as eligible.
fit_vals <- fit_vals %>% mutate(tilde_val = if_else(mod_iag$fitted.values>=0.5, 1, 0))
print(paste("Number of Elibible Families = ", sum(fit_vals$tilde_val)))
# (vi)
k401 <- k401 %>% mutate(pred_val = fit_vals$tilde_val)
true_pos <- k401 %>% filter(e401k>0)
num_pred_pos <- sum(true_pos$pred_val)
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible is:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=4), "%."))
true_neg <- k401 %>% filter(e401k==0)
neg_pred_pos <- sum(true_neg$pred_val)
corr_pred <- nrow(true_neg)-neg_pred_pos
print(paste("Of the Total", nrow(true_neg), "Ineligible Families, the number of families predicted to be ineleligible is:", corr_pred, "which is", signif(corr_pred*100/nrow(true_neg), digits=4), "%."))
#(Vii)
#Overall percent correctly predicted by the model.
k401 <- k401 %>% mutate(pred_crct = if_else(k401$e401k==k401$pred_val, 1, 0))
num_pred_correctly <- sum(k401$pred_crct)
print(paste("Of the Total", nrow(k401), "families, the eligibility of ", num_pred_correctly, "families was predicted correctly, which is,", signif(num_pred_correctly*100/nrow(k401), digits=4), "%."))
#(Viii)
mod_iag_pi <- lm(e401k~inc+age+male+incsq+agesq+pira, data = k401)
summary(mod_iag_pi)
#(ix)
# average, standard deviation, minimum, and maximum values of nettfa in the sample
tavg <- format(mean(k401$nettfa), digits=4)
tsd <- format(sd(k401$nettfa), digits=4)
tmin <- format(min(k401$nettfa), digits=5)
tmax <- format(max(k401$nettfa), digits=7)
print(paste("Average:", tavg, "; Standard Deviation:", tsd, "; Minimum Value:", tmin, "; Maximum Value:", tmax, "."))
# (ii)
# Linear Probability Model, eligibility -> f(income, age, gender)
# model with income, age, and gender
# mod_iag <- lm(e401k~male+incsq+agesq, data = k401)
mod_iag <- lm(e401k~inc+age+male+incsq+agesq, data = k401)
library(readxl)
library(dplyr)
k401 <- read_excel("C:/Users/sharm/OneDrive/Documents/Rstudio/Econometrics-I/401ksubs.xls")
# View(k401)
k401 <- as.data.frame(k401)
# (i)
# Counting the Total Number of Eligible families and calculating
# summary(k401)
nEligible <- sum(k401$e401k)
nTotal <- length(k401$e401k)
print(paste("Number of Eligible Families = ", nEligible))
print(paste("Which is ", (nEligible*100/nTotal), "% of the total of ", nTotal, "families."))
# (ii)
# Linear Probability Model, eligibility -> f(income, age, gender)
# model with income, age, and gender
# mod_iag <- lm(e401k~male+incsq+agesq, data = k401)
mod_iag <- lm(e401k~inc+age+male+incsq+agesq, data = k401)
summary(mod_iag)
#
# # model with income^2, age^2, gender
# mod_iag_sq <- lm(e401k~incsq+agesq+male, data=k401)
# summary(mod_iag_sq)
# (iii)
# RESULT:
print("Dependence of eligibility on income, age and gender: ")
# (iv)
# fitted values
fit_vals <- as.data.frame(mod_iag$fitted.values)
summary(fit_vals)
grt_vals <- fit_vals %>% filter(mod_iag$fitted.values>1)
print(paste("While the total number of rows with negative values is ZERO, the number of rows with values greater than 1 are:", nrow(grt_vals)))
# (v)
# Making anyone with a probability greater than or equal to 0.5 as eligible.
fit_vals <- fit_vals %>% mutate(tilde_val = if_else(mod_iag$fitted.values>=0.5, 1, 0))
print(paste("Number of Elibible Families = ", sum(fit_vals$tilde_val)))
# (vi)
k401 <- k401 %>% mutate(pred_val = fit_vals$tilde_val)
true_pos <- k401 %>% filter(e401k>0)
num_pred_pos <- sum(true_pos$pred_val)
print(paste("Of the Total ", nrow(true_pos), "Eligible Families, the number of families predicted to be eligible is:", num_pred_pos, "which is", signif(num_pred_pos*100/nrow(true_pos), digits=4), "%."))
true_neg <- k401 %>% filter(e401k==0)
neg_pred_pos <- sum(true_neg$pred_val)
corr_pred <- nrow(true_neg)-neg_pred_pos
print(paste("Of the Total", nrow(true_neg), "Ineligible Families, the number of families predicted to be ineleligible is:", corr_pred, "which is", signif(corr_pred*100/nrow(true_neg), digits=4), "%."))
#(Vii)
#Overall percent correctly predicted by the model.
k401 <- k401 %>% mutate(pred_crct = if_else(k401$e401k==k401$pred_val, 1, 0))
num_pred_correctly <- sum(k401$pred_crct)
print(paste("Of the Total", nrow(k401), "families, the eligibility of ", num_pred_correctly, "families was predicted correctly, which is,", signif(num_pred_correctly*100/nrow(k401), digits=4), "%."))
#(Viii)
mod_iag_pi <- lm(e401k~inc+age+male+incsq+agesq+pira, data = k401)
summary(mod_iag_pi)
#(ix)
# average, standard deviation, minimum, and maximum values of nettfa in the sample
tavg <- format(mean(k401$nettfa), digits=4)
tsd <- format(sd(k401$nettfa), digits=4)
tmin <- format(min(k401$nettfa), digits=5)
tmax <- format(max(k401$nettfa), digits=7)
print(paste("Average:", tavg, "; Standard Deviation:", tsd, "; Minimum Value:", tmin, "; Maximum Value:", tmax, "."))
#(x)
#(xi)
# model <- nettfa - f(incsq, agesq, e401k)
mod_ntfa <- lm(nettfa~incsq+agesq+e401k, data = k401)
summary(ntfa)
summary(mod_ntfa)
#(x)
# Test: average nettfa does not differ by 401(k) eligibility status
k401 <- k4
#(x)
# Test: average nettfa does not differ by 401(k) eligibility status
k401 <- k401 %<% mutate(avg_nettfa = if_else(k401$nettfa>=tavg, 0,1))
#(x)
# Test: average nettfa does not differ by 401(k) eligibility status
k401 <- k401 %>% mutate(avg_nettfa = if_else(k401$nettfa>=tavg, 0,1))
t_test <- t.test(k401$e401k, k401$avg_nettfa, var.equal = TRUE)
t_test
t_test <- t.test(k401$e401k, k401$avg_nettfa, alternative = "two.sided", var.equal = FALSE)
t_test
t_test <- t.test(k401$e401k, k401$nettfa, alternative = "two.sided", var.equal = FALSE)
t_test
t_test <- t.test(k401$nettfa, k401$e401k, alternative = "two.sided", var.equal = FALSE)
t_test
print(t_test)
print(summary(mod_ntfa))
View(mod_ntfa)
mod_ntfa$coefficients[1]
mod_ntfa$coefficients[2]
mod_ntfa$coefficients[2][2]
mod_ntfa$coefficients[2]
temp <- mod_ntfa$coefficients[2]
view(temp)
View(temp)
temp$value
temp.value
value(temp)
summary(temp)
temp
temp[1]
temp[2]
temp[1]
summary(temp)
View(temp)
Type(temp)
type(temp)
class(temp)
temp <- as.data.frame(temp)
View(temp)
print(temp$temp)
as.data.frame(mod_ntfa$coefficients[2])$temp
temp <- as.data.frame(mod_ntfa$coefficients[2])
print(paste("Estimated Dollar Effect of eligibility: ", temp$temp*1000))
print(paste("Estimated Dollar Effect of eligibility: ", temp$temp))
temp <- as.data.frame(mod_ntfa$coefficients[2])
print(paste("Estimated Dollar Effect of eligibility: ", temp$temp))
temp <- as.data.frame(mod_ntfa$coefficients[2])
View(temp)
print(paste("Estimated Dollar Effect of eligibility: ", temp$mod_ntfa$coefficients[2]))
max(temp)
print(paste("Estimated Dollar Effect of eligibility: ", max(temp)))
print(paste("Estimated Dollar Effect of eligibility: ", max(temp)*1000))
print(paste("Estimated Dollar Effect of eligibility: ", format(max(temp)*1000), digits=4)
print(paste("Estimated Dollar Effect of eligibility: ", format(max(temp)*1000), digits=4))
print(paste("Estimated Dollar Effect of eligibility: ", format(max(temp)*1000, digits=4)))
getwd()
install.packages("Rtools")
library(readxl)
library(ggplot2)
library(matlib)
library(dplyr)
library(ggpubr)
install.packages("ggpubr")
install.packages("tseries")
aqidata <- read_excel("Ronit/AirQualityData.xlsx")
View(aqidata)
aqidata <- read_excel("Ronit/AirQualityData.xlsx")
View(aqidata)
aqidata_working <- aqidata %>%
dplyr::filter(NOxGT > 0 & NO2GT >0)
aqidata_working <- aqidata %>%
dplyr::filter(`NOx(GT)` > 0 & `NO2(GT)` >0)
X1 <- sqrt(aqidata_working$NOxGT)
X1 <- sqrt(aqidata_working$`NOx(GT)`)
X2 <- sqrt(aqidata_working$`NO2(GT)`)
corr_coeff <- cor.test(X1, X2, method = c("pearson"))
corr_coeff
ggscatter(aqidata_working, x = "`NOx(GT)`", y = "`NO2(GT)`", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
library(ggplot2)
ggscatter(aqidata_working, x = "`NOx(GT)`", y = "`NO2(GT)`", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
library(ggpubr)
ggscatter(aqidata_working, x = "`NOx(GT)`", y = "`NO2(GT)`", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
ggscatter(aqidata_working, x = "`NOx(GT)`", y = "`NO2(GT)`", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
view(aqidata_working)
View(aqidata_working)
ggscatter(aqidata_working, x = "NOx(GT)", y = "NO2(GT)", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
ggscatter(aqidata_working, x = `NOx(GT)`, y = `NO2(GT)`, add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
View(aqidata_working)
colnames(aqidata_working)
cNms <- colnames(aqidata_working)
corr_coeff
cNmsN <- c('Date', 'Time', 'CO-GT', 'PT08.51-CO', 'NMHC-GT', 'C6H6-GT', 'PT08.S2-NMHC'
,'NOx-GT', 'PT08.S3-NOx', 'NO2-GT', 'PT08.S4-NO2', 'PT08.S5-O3', 'T',
'RH', 'AH')
cNmsN
cNms
colnames(aqidata_working) <-cNmsN
cNms <- colnames(aqidata_working)
cNms
ggscatter(aqidata_working, x = 'NOx-GT', y = 'NO2_GT', add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
colnames(aqidata_working)
ggscatter(aqidata_working, x = "NOx-GT", y = "NO2_GT", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",xlab = "Sqrt NOx", ylab = "Sqrt NO2")
ggscatter(aqidata_working, x = "NOx-GT", y = "NO2_GT", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson", xlab = "Sqrt NOx", ylab = "Sqrt NO2")
aqidata_working <- aqidata_working %>%
dplyr::mutate(X1=sqrt(NOx_GT))
aqidata_working <- aqidata_working %>%
dplyr::mutate(X1=sqrt(NOx_GT)) %>%
dplyr::mutate(X2=sqrt(NO2-GT))
cNmsN <- c('Date', 'Time', 'CO-GT', 'PT08.51-CO', 'NMHC-GT', 'C6H6-GT', 'PT08.S2-NMHC'
,'NOx-GT', 'PT08.S3-NOx', 'NO2-GT', 'PT08.S4-NO2', 'PT08.S5-O3', 'T',
'RH', 'AH')
colnames(aqidata_working) <-cNmsN
aqidata_working <- aqidata_working %>%
dplyr::mutate(X1=sqrt(NOx_GT)) %>%
dplyr::mutate(X2=sqrt(NO2-GT))
X1 <- sqrt(aqidata_working$`NOx(GT)`)
corr_coeff <- cor.test(X1, X2, method = c("pearson"))
corr_test2 <- cor.test(X1, X2)
corr_coeff
corr_test2
plot(X1, X2)
hist(X1)
hist(X2)
ggplot(aes(x=X1, y=X2) + geom_point())
ggplot(aqidata_working, aes(x=X1, y=X2) + geom_point())
ggplot(aes(x=X1, y=X2)) +
geom_point()
dfn <- data.frame(X1,X2)
View(dfn)
dfn <- data.frame(X1,X2)
ggplot(dfn, aes(x=X1, y=X2)) +
geom_point()
plot(X1, X2)
ggexport(scplt, "sctplt.png")
ggexport(filename = "sctplt.png")
scplt <- ggplot(dfn, aes(x=X1, y=X2)) +
geom_point()
ggexport(filename = "sctplt.png")
library(readxl)
library(ggplot2)
library(matlib)
library(dplyr)
library(ggpubr)
library(tseries)
aqidata <- read_excel("Ronit/AirQualityData.xlsx")
View(aqidata)
aqidata_working <- aqidata %>%
dplyr::filter(`NOx(GT)` > 0 & `NO2(GT)` >0)
X1 <- sqrt(aqidata_working$`NOx(GT)`)
X2 <- sqrt(aqidata_working$`NO2(GT)`)
corr_coeff <- cor.test(X1, X2, method = c("pearson"))
dfn <- data.frame(X1,X2)
scplt <- ggplot(dfn, aes(x=X1, y=X2)) +
geom_point()
scplt
RH_working <- aqidata %>%
dplyr::filter(RH>0)
R <- RH_working$RH
autocorr <- acf(R,p1=FALSE)
autocorr
reg_d <- lm(RH ~ X1 + X2, data = aqidata_working)
reg_d
summary(reg_d)
stargazer(reg_d, type="text")
library(stargazer)
stargazer(reg_d, type="text")
chisq.test(aqidata_working$RH, X2, correct=FALSE)
chisq.test(aqidata_working$RH, X2, correct=FALSE)
chisq.test(R, X2, correct=FALSE)
chisq.test(aqidata_working$RH, X2, correct=FALSE)
chisq.test(aqidata_working$RH, aqidata_working$`NO2(GT)`, correct=FALSE)
chisq.test(aqidata_working$RH, aqidata_working$`NO2(GT)`, correct=FALSE)
warning()
RH_working <- RH %>%
dplyr::mutate(NO2-lvl="High") %>%
View(RH_working)
RH_working <- RH %>%
dplyr::mutate(NO2-lvl=`NO2(GT`>100)
RH_working <- RH %>%
dplyr::mutate(Lvl_NO2=`NO2(GT)`>100)
RH_working <- RH_workin %>%
dplyr::mutate(Lvl_NO2=`NO2(GT)`>100)
RH_working <- RH_working %>%
dplyr::mutate(Lvl_NO2=`NO2(GT)`>100)
RH_working <- RH_working %>%
dplyr::mutate(Lvl_NO2=`NO2(GT)`>100) %>%
dplyr::mutate(Lvl_Humid=RH>50)
chisq.test(RH_working$Lvl_Humid, RH_working$Lvl_NO2, correct = FALSE)
reg_d <- lm(RH ~ X1 + X2, data = aqidata_working)
reg_d
summary(reg_d)
stargazer(reg_d, type="text")
reg_e <- lm(X2 ~ RH, data = aqidata_working)
stargazer(reg_e, type="text")
reg_e1 <- lm(X2 ~ RH, data = aqidata_working)
stargazer(reg_e1, type="text")
reg_e2 <- lm(RH ~ X2, data = aqidata_working)
stargazer(reg_e2, type="text")
hist(X1)
hist(X2)
corr_coeff <- cor.test(X1, X2, method = c("pearson"))
corr_coeff
chisq.test(RH_working$Lvl_Humid, RH_working$Lvl_NO2, correct = FALSE)
summary(ct)
ct <- chisq.test(RH_working$Lvl_Humid, RH_working$Lvl_NO2, correct = FALSE)
summary(ct)
ct
RH_working <- aqidata %>%
dplyr::filter(RH>0)
R <- RH_working$RH
autocorr <- acf(R,p1=FALSE)
autocorr
rel_hum <- density(R)
plot(rel_hum, )
ggqqplot(R, ylab = 'R')
summary(R)
plot(autocorr)
summary(autocorr)
autocorr
autocorr
plot(rel_hum, )
ggqqplot(R, ylab = 'R')
plot(autocorr)
plot(rel_hum, )
ggqqplot(R, ylab = 'R')
gc()
rm(list=ls())
shell("cls")
options(warn = 1)
setwd("C:/Users/sharm/OneDrive - Indian Institute of Management/RHome/FMC-02")
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
library(ggpubr)
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
source("main.R")
main()
which git
git
